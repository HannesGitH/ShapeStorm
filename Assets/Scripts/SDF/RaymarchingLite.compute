#pragma kernel CSMain
#include "./distances.hlsl"

Texture2D<float4> Source;
RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float crazyEffectStrength;
float3 _Light;
bool positionLight;

int liteModeAggressor = 16;
float epsilon = 0.3f ;

static const float maxDst = 40;
static const float shadowBias = epsilon * 50;

StructuredBuffer<Shape> shapes;
int numShapes;


struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}

// polynomial smooth min (k = 0.1);
// from https://www.iquilezles.org/www/articles/smin/smin.htm
float Blend( float a, float b, float k )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return lerp( b, a, h ) - k*h*(1.0-h);
}

float Combine(float dstA, float dstB, int operation, float blendStrength) {
    float dst = dstA;

    if (operation == 0) {
        if (dstB < dstA) {
            dst = dstB;
        }
    } 
    // Blend
    else if (operation == 1) {
        float blend = Blend(dstA,dstB,blendStrength);
        dst = blend;
    }
    // Cut
    else if (operation == 2) {
        // max(a,-b)
        if (-dstB > dst) {
            dst = -dstB;
        }
    }
    // Mask
    else if (operation == 3) {
        // max(a,b)
        if (dstB > dst) {
            dst = dstB;
        }
    }
    return dst;
}

float SceneInfo(float3 eye) {
    // return 1;
    float globalDst = maxDst;
    
    for (int i = 0; i < numShapes; i ++) {
        Shape shape = shapes[i];
        int numChildren = shape.numChildren;

        float localDst = GetShapeDistance(shape,eye);


        for (int j = 0; j < numChildren; j ++) {
            Shape childShape = shapes[i+j+1];
            float childDst = GetShapeDistance(childShape,eye);

            float combined = Combine(localDst, childDst, childShape.operation, childShape.blendStrength);
            localDst = combined;
        }
        i+=numChildren; // skip over children in outer loop
        
        float globalCombined = Combine(globalDst, localDst, shape.operation, shape.blendStrength);
        globalDst = globalCombined;        
    }

    return globalDst;
}

float3 EstimateNormal(float3 p) {
    float x = SceneInfo(float3(p.x+epsilon,p.y,p.z)) - SceneInfo(float3(p.x-epsilon,p.y,p.z));
    float y = SceneInfo(float3(p.x,p.y+epsilon,p.z)) - SceneInfo(float3(p.x,p.y-epsilon,p.z));
    float z = SceneInfo(float3(p.x,p.y,p.z+epsilon)) - SceneInfo(float3(p.x,p.y,p.z-epsilon));
    return normalize(float3(x,y,z));
}

// float CalculateShadow(Ray ray, float dstToShadePoint) {
//     float rayDst = 0;
//     int marchSteps = 0;
//     float shadowIntensity = .2;
//     float brightness = 1;

//     while (rayDst < dstToShadePoint) {
//         marchSteps ++;
//         float4 sceneInfo = SceneInfo(ray.origin);
//         float dst = sceneInfo.w;
        
//         if (dst <= epsilon) {
//             return shadowIntensity;
//         }

//         brightness = min(brightness,dst*200);

//         ray.origin += ray.direction * dst;
//         rayDst += dst;
//     }
//     return shadowIntensity + (1-shadowIntensity) * brightness;
// }

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width,height;
    Destination.GetDimensions(width, height);

    // for(int x = 0; x<liteModeAggressor ; x++){
    //     Destination[id.xy * (liteMode ? liteModeAggressor : 1)+x] = Source[id.xy  * (liteMode ? liteModeAggressor : 1)];
    // }

    float2 uv = (id.xy*liteModeAggressor / float2(width,height) * 2 - 1);
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;
    float sceneInfo;
    float dst;
    bool success = false;
    while (rayDst < maxDst) {
        marchSteps ++;
        dst = SceneInfo(ray.origin);
        
        if (dst <= epsilon) {
            success = true;
            break;
        }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }


    for(int x = 0; x<liteModeAggressor ; x++){
    for(int y = 0; y<liteModeAggressor ; y++){
        Destination[id.xy*liteModeAggressor-float2(x,y)]=float4(marchSteps*float3(0.05f,0.0125f,0.1f),1);
    }
    }
    
    success=false;

}
