#pragma kernel CSMain
#include "./distances.hlsl"

Texture2D<float4> Source;
RWTexture2D<float4> Destination;
RWBuffer<int> CrashCheck;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float crazyEffectStrength;
float3 _Light;
bool positionLight;

int liteModeAggressor = 16;
float epsilon = 0.3f ;

// float maxDst = 40;
static const float shadowBias = epsilon * 50;

// StructuredBuffer<Shape> shapes;
// int numShapes;


struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}



// float3 EstimateNormal(float3 p) {
//     float x = SceneInfo(float3(p.x+epsilon,p.y,p.z)) - SceneInfo(float3(p.x-epsilon,p.y,p.z));
//     float y = SceneInfo(float3(p.x,p.y+epsilon,p.z)) - SceneInfo(float3(p.x,p.y-epsilon,p.z));
//     float z = SceneInfo(float3(p.x,p.y,p.z+epsilon)) - SceneInfo(float3(p.x,p.y,p.z-epsilon));
//     return normalize(float3(x,y,z));
// }

// float CalculateShadow(Ray ray, float dstToShadePoint) {
//     float rayDst = 0;
//     int marchSteps = 0;
//     float shadowIntensity = .2;
//     float brightness = 1;

//     while (rayDst < dstToShadePoint) {
//         marchSteps ++;
//         float4 sceneInfo = SceneInfo(ray.origin);
//         float dst = sceneInfo.w;
        
//         if (dst <= epsilon) {
//             return shadowIntensity;
//         }

//         brightness = min(brightness,dst*200);

//         ray.origin += ray.direction * dst;
//         rayDst += dst;
//     }
//     return shadowIntensity + (1-shadowIntensity) * brightness;
// }
#define threadsX 16
#define threadsY 16

[numthreads(threadsX,threadsY,1)]
void CSMain (uint3 groupID : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    uint width,height;
    Destination.GetDimensions(width, height);

    // for(int x = 0; x<liteModeAggressor ; x++){
    //     Destination[id.xy * (liteMode ? liteModeAggressor : 1)+x] = Source[id.xy  * (liteMode ? liteModeAggressor : 1)];
    // }

    float2 uv = (id.xy*liteModeAggressor / float2(width,height) * 2 - 1);
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;
    float sceneInfo;
    float dst;
    bool success = false;
    while (rayDst < maxDst) {
        marchSteps ++;
        dst = Distance(ray.origin);
        // if (marchSteps==1){
        //     CrashCheck[id.xy]=float4(1-(dst*0.025),0,0,1);
        // }
        
        if (dst <= epsilon) {
            success = true;
            break;
        }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }


    for(int x = 0; x<liteModeAggressor ; x++){
    for(int y = 0; y<liteModeAggressor ; y++){
        Destination[id.xy*liteModeAggressor-float2(x,y)]=float4(marchSteps*float3(0.05f,0.0125f,0.1f),1);
    }
    }

    if(epsilon>rayDst)
    CrashCheck[0]=1;
    
    success=false;

}
